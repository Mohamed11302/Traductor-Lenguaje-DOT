
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\063\000\002\002\004\000\002\002\007\000\002\003" +
    "\005\000\002\003\005\000\002\003\005\000\002\003\005" +
    "\000\002\004\005\000\002\005\006\000\002\005\006\000" +
    "\002\005\006\000\002\005\006\000\002\005\006\000\002" +
    "\006\004\000\002\006\003\000\002\007\005\000\002\010" +
    "\006\000\002\010\006\000\002\010\006\000\002\010\006" +
    "\000\002\010\006\000\002\011\004\000\002\011\003\000" +
    "\002\020\007\000\002\020\005\000\002\020\006\000\002" +
    "\020\004\000\002\021\006\000\002\022\006\000\002\022" +
    "\004\000\002\023\004\000\002\023\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\016\004\000\002\016\002\000" +
    "\002\017\003\000\002\017\003\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\006\004\uffd2\044\004\001\002\000\020\002" +
    "\uffd2\004\uffd2\005\uffd2\013\uffd2\037\uffd2\044\004\045\uffd2" +
    "\001\002\000\004\002\160\001\002\000\004\004\007\001" +
    "\002\000\004\045\010\001\002\000\004\035\011\001\002" +
    "\000\014\005\uffd2\013\uffd2\037\uffd2\044\004\045\uffd2\001" +
    "\002\000\012\005\015\013\014\037\017\045\016\001\002" +
    "\000\004\002\000\001\002\000\004\036\156\001\002\000" +
    "\004\036\154\001\002\000\010\015\027\036\032\043\030" +
    "\001\002\000\006\002\uffd2\044\004\001\002\000\014\005" +
    "\uffd2\013\uffd2\037\uffd2\044\004\045\uffd2\001\002\000\014" +
    "\005\uffd2\013\uffd2\037\uffd2\044\004\045\uffd2\001\002\000" +
    "\014\005\uffd2\013\uffd2\037\uffd2\044\004\045\uffd2\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\ufffd\001\002\000" +
    "\004\002\ufffe\001\002\000\004\002\ufffc\001\002\000\004" +
    "\041\106\001\002\000\014\005\uffe8\013\uffe8\037\uffe8\044" +
    "\uffe8\045\uffe8\001\002\000\006\036\103\043\102\001\002" +
    "\000\014\006\035\007\040\010\033\011\034\012\037\001" +
    "\002\000\004\041\077\001\002\000\004\041\070\001\002" +
    "\000\004\041\061\001\002\000\004\043\060\001\002\000" +
    "\004\041\052\001\002\000\004\041\041\001\002\000\010" +
    "\045\044\046\043\047\042\001\002\000\006\040\uffd0\042" +
    "\uffd0\001\002\000\006\040\uffd1\042\uffd1\001\002\000\006" +
    "\040\uffcf\042\uffcf\001\002\000\006\040\050\042\046\001" +
    "\002\000\014\006\035\007\040\010\033\011\034\012\037" +
    "\001\002\000\016\005\ufff9\013\ufff9\037\ufff9\043\ufff9\044" +
    "\ufff9\045\ufff9\001\002\000\016\005\ufff4\013\ufff4\037\ufff4" +
    "\043\ufff4\044\ufff4\045\ufff4\001\002\000\016\005\ufff5\013" +
    "\ufff5\037\ufff5\043\ufff5\044\ufff5\045\ufff5\001\002\000\010" +
    "\026\054\027\053\030\055\001\002\000\006\040\uffd9\042" +
    "\uffd9\001\002\000\006\040\uffda\042\uffda\001\002\000\006" +
    "\040\uffd8\042\uffd8\001\002\000\006\040\050\042\046\001" +
    "\002\000\016\005\ufff6\013\ufff6\037\ufff6\043\ufff6\044\ufff6" +
    "\045\ufff6\001\002\000\014\005\uffe9\013\uffe9\037\uffe9\044" +
    "\uffe9\045\uffe9\001\002\000\012\016\063\017\062\020\066" +
    "\021\064\001\002\000\006\040\uffe1\042\uffe1\001\002\000" +
    "\006\040\uffe2\042\uffe2\001\002\000\006\040\uffdf\042\uffdf" +
    "\001\002\000\006\040\050\042\046\001\002\000\006\040" +
    "\uffe0\042\uffe0\001\002\000\016\005\ufffa\013\ufffa\037\ufffa" +
    "\043\ufffa\044\ufffa\045\ufffa\001\002\000\012\022\072\023" +
    "\074\024\073\025\071\001\002\000\006\040\uffdb\042\uffdb" +
    "\001\002\000\006\040\uffde\042\uffde\001\002\000\006\040" +
    "\uffdc\042\uffdc\001\002\000\006\040\uffdd\042\uffdd\001\002" +
    "\000\006\040\050\042\046\001\002\000\016\005\ufff7\013" +
    "\ufff7\037\ufff7\043\ufff7\044\ufff7\045\ufff7\001\002\000\012" +
    "\022\072\023\074\024\073\025\071\001\002\000\006\040" +
    "\050\042\046\001\002\000\016\005\ufff8\013\ufff8\037\ufff8" +
    "\043\ufff8\044\ufff8\045\ufff8\001\002\000\014\005\uffea\013" +
    "\uffea\037\uffea\044\uffea\045\uffea\001\002\000\014\006\035" +
    "\007\040\010\033\011\034\012\037\001\002\000\004\043" +
    "\105\001\002\000\014\005\uffeb\013\uffeb\037\uffeb\044\uffeb" +
    "\045\uffeb\001\002\000\004\035\107\001\002\000\004\045" +
    "\111\001\002\000\006\036\uffe7\043\uffe7\001\002\000\010" +
    "\036\115\037\113\042\112\001\002\000\004\045\111\001" +
    "\002\000\006\036\uffe3\043\uffe3\001\002\000\006\036\uffe5" +
    "\043\uffe5\001\002\000\014\007\123\010\117\011\120\012" +
    "\121\014\116\001\002\000\004\041\144\001\002\000\004" +
    "\041\141\001\002\000\004\041\136\001\002\000\004\041" +
    "\133\001\002\000\006\037\113\042\112\001\002\000\004" +
    "\041\124\001\002\000\010\045\044\046\043\047\042\001" +
    "\002\000\006\040\130\042\126\001\002\000\014\007\123" +
    "\010\117\011\120\012\121\014\116\001\002\000\016\005" +
    "\ufff1\013\ufff1\037\ufff1\042\ufff1\044\ufff1\045\ufff1\001\002" +
    "\000\016\005\uffec\013\uffec\037\uffec\042\uffec\044\uffec\045" +
    "\uffec\001\002\000\016\005\uffed\013\uffed\037\uffed\042\uffed" +
    "\044\uffed\045\uffed\001\002\000\006\036\uffe6\043\uffe6\001" +
    "\002\000\010\026\054\027\053\030\055\001\002\000\006" +
    "\040\130\042\126\001\002\000\016\005\uffee\013\uffee\037" +
    "\uffee\042\uffee\044\uffee\045\uffee\001\002\000\012\022\072" +
    "\023\074\024\073\025\071\001\002\000\006\040\130\042" +
    "\126\001\002\000\016\005\uffef\013\uffef\037\uffef\042\uffef" +
    "\044\uffef\045\uffef\001\002\000\012\022\072\023\074\024" +
    "\073\025\071\001\002\000\006\040\130\042\126\001\002" +
    "\000\016\005\ufff0\013\ufff0\037\ufff0\042\ufff0\044\ufff0\045" +
    "\ufff0\001\002\000\012\031\150\032\147\033\146\034\151" +
    "\001\002\000\006\040\130\042\126\001\002\000\006\040" +
    "\uffd5\042\uffd5\001\002\000\006\040\uffd6\042\uffd6\001\002" +
    "\000\006\040\uffd7\042\uffd7\001\002\000\006\040\uffd4\042" +
    "\uffd4\001\002\000\016\005\ufff2\013\ufff2\037\ufff2\042\ufff2" +
    "\044\ufff2\045\ufff2\001\002\000\006\036\uffe4\043\uffe4\001" +
    "\002\000\014\006\035\007\040\010\033\011\034\012\037" +
    "\001\002\000\014\005\ufffb\013\ufffb\037\ufffb\044\ufffb\045" +
    "\ufffb\001\002\000\014\007\123\010\117\011\120\012\121" +
    "\014\116\001\002\000\014\005\ufff3\013\ufff3\037\ufff3\044" +
    "\ufff3\045\ufff3\001\002\000\004\002\001\001\002\000\016" +
    "\002\uffd3\004\uffd3\005\uffd3\013\uffd3\037\uffd3\045\uffd3\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\006\002\004\016\005\001\001\000\004\016" +
    "\160\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\003\012\016\011\001" +
    "\001\000\010\004\021\007\017\020\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\030\001\001\000\004\016\025\001\001\000\006\003\024" +
    "\016\011\001\001\000\006\003\023\016\011\001\001\000" +
    "\006\003\022\016\011\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\046\001\001\000\004" +
    "\005\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\006\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\064" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\066\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\075\001\001\000\002\001\001\000\004\014\077\001" +
    "\001\000\004\006\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\107\001\001" +
    "\000\002\001\001\000\004\023\113\001\001\000\004\022" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\131\001\001" +
    "\000\002\001\001\000\004\017\124\001\001\000\004\011" +
    "\126\001\001\000\004\010\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\133\001\001\000\004\011\134\001\001\000\002" +
    "\001\001\000\004\014\136\001\001\000\004\011\137\001" +
    "\001\000\002\001\001\000\004\014\141\001\001\000\004" +
    "\011\142\001\001\000\002\001\001\000\004\015\144\001" +
    "\001\000\004\011\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\154\001\001\000\002" +
    "\001\001\000\004\010\156\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	  public void AbrirImagen() {
        
        String directorio = System.getProperty("user.dir") + "\\resultado";
        String archivoDot = "resultado_analisis.dot";
        
        ProcessBuilder pb = new ProcessBuilder("cmd.exe", "/c", "abrir_resultado.bat", archivoDot);
        pb.directory(new File(directorio));
        
        try {
            Process p = pb.start();
            BufferedReader reader = new BufferedReader(new InputStreamReader(p.getInputStream()));
            String line;
            while ((line = reader.readLine()) != null) {
                System.out.println(line);
            }
            p.waitFor();
        } catch (IOException e) {
            e.printStackTrace();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
	
	public  HashMap<String, Object> mapa = new HashMap<>();
	
	
	public void ActualizarMap(String id, ArrayList<AristaDelArbol> def_hijos){
		//DEFINIMOS EL NODO SI NO ESTA CREADO
		HashMap<String, Object> nodo_mapa = (HashMap<String, Object>) mapa.get(id.toString());
		if (nodo_mapa == null){
			mapa.put(id.toString(), new HashMap<String, Object>() {{
        		put("Nodo definido", true);
    			put("Nodo como hijo", false);
			}});
		}//SI EL NODO ESTABA CREADO, SU ATRIBUTO "NODO DEFINIDO" = TRUE
		else{
			nodo_mapa.put("Nodo definido", true);
		}
	
		//ACTUALIZAMOS LOS NODOS QUE HAN SIDO DEFINIDOS COMO ARISTAS: "NODO COMO HIJO"
		if (def_hijos != null){
			for(AristaDelArbol elemento : def_hijos){
				HashMap<String, Object> nodo_mapa2 = (HashMap<String, Object>) mapa.get(elemento.id.toString());
				
				if (nodo_mapa2 != null) 													//SI EL NODO HIJO YA ESTA CREADO, ACTUALIZAMOS SU VALOR NODO COMO HIJO
					nodo_mapa2.put("Nodo como hijo", true);
				else{																		//SI EL NODO HIJO NO ESTA CREADO, LO CREAMOS
					mapa.put(elemento.id.toString(), new HashMap<String, Object>() {{
	    				put("Nodo definido", false);
	    				put("Nodo como hijo", true);
					}});
				}
			}
			
		}
	}
	
	public NodoDelArbol CreacionDelNodo(String id, String Atributos, ArrayList<AristaDelArbol> def_hijos){
		/*CREAMOS EL NODO*/
  		NodoDelArbol nodo = new NodoDelArbol(id);
  		
  		/*AÑADIMOS LOS ATRIBUTOS DEL NODO*/
  		if (Atributos != null){
		  	String[] arrayCadena = Atributos.substring(0, Atributos.length() - 1).split(",");
			for (int i=0; i<arrayCadena.length;i++){
				nodo.atributos.add(arrayCadena[i]);
			}
		}
		
		/*AÑADIMOS SU LISTA DE HIJOS*/
		if (def_hijos != null)  nodo.hijos = def_hijos;

		/*ACTUALIZAMOS EL MAP*/
		ActualizarMap(id, def_hijos);
	
		return nodo;
	} 
	public String ImprimirNodo(NodoDelArbol nodo){
		String cadena ="";	
		if (nodo.atributos.size()>0 || nodo.hijos.size()>0){
			cadena = nodo.id;
			if (nodo.atributos.size()>0){
				cadena += nodo.atributos;
			}
			cadena +=";\n";
			for(AristaDelArbol elemento : nodo.hijos){
    			cadena += nodo.id + "->" + elemento.id.toString(); 
    			if (elemento.atributos.size()>0){
    			cadena += elemento.atributos.toString();
    			}
    			cadena +=";\n";		
			}
		}				
	return cadena;
	}
	
	

	public static void main(String args[]) throws Exception {	 
		try{	
 			FileInputStream stream = new java.io.FileInputStream(args[0]);
        	Reader reader = new java.io.InputStreamReader(stream);
        	parser parser = new parser(new Yylex(reader));
			parser.parse();
		}
		catch (FileNotFoundException e){
			System.out.println("ERROR. No se pudo encontrar el archivo: " + args[0]);
		}
		catch ( Exception e) {
			System.out.println("EXCEPCION. ANALISIS INCORRECTO !!");
			//System.exit(1);
		}
		
	 }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= DefArbol EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // DefArbol ::= DefComentarios ARBOL IDENTIFICADOR LLAVE_A DefArbolAux 
            {
              Object RESULT =null;
		int comentarioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int comentarioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object comentario = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int llave_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int llave_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object llave_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int definicion_arbolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int definicion_arbolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object definicion_arbol = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String cadena = comentario.toString() + "digraph"+" "+ id.toString() + llave_a.toString() +"\n"+ definicion_arbol.toString();  
		File archivo = new File(System.getProperty("user.dir") + "\\resultado\\resultado_analisis.dot");
		
		
		/************************** COMPROBACION PUNTO 4 ************************************/
		boolean RaizEncontrada = false;
		boolean NodoDefinido = true;
		boolean NodoComoHijo = true;
		ArrayList<String> nodos_no_definidos = new ArrayList<String>();
		ArrayList<String> nodos_no_hijos = new ArrayList<String>();
		for (Map.Entry<String, Object> entry : parser.mapa.entrySet()) {
            String clave = entry.getKey();
             HashMap<String, Object> innerMap = (HashMap<String, Object>) entry.getValue();
                for (Map.Entry<String, Object> innerEntry : innerMap.entrySet()) {
                    if (innerEntry.getKey().equals("Nodo como hijo")) {
                    	if ((boolean) innerEntry.getValue() == false){ 			//ENCUENTRAS A 2 NODOS QUE NO ESTAN DEFINIDOS COMO HIJOS 
                        	if (RaizEncontrada) {								//SOLO 1 NODO (LA RAIZ) PUEDE NO ESTAR DEFINIDO COMO HIJO
                        		nodos_no_hijos.add(entry.getKey());				//POR TANTO ERROR
                        		NodoComoHijo = false;  
                        	} 											
                        	else{						
                        		nodos_no_hijos.add(entry.getKey());
                        		RaizEncontrada = true;
                        	}						
                        }
                    } else if (innerEntry.getKey().equals("Nodo definido")) {
                        if ((boolean) innerEntry.getValue() == false) { 					//HAS ENCONTRADO UN NODO QUE NO HA SIDO DEFINIDO
                         	NodoDefinido = false;											//POR TANTO ERROR
                         	nodos_no_definidos.add(entry.getKey());
                         }
                    }																				
                }
        }

		/************************** COMPROBACION PUNTO 4 ************************************/	
		
		/************************** LA ESTRUCTURA ES CORRECTA -> SE CREA EL ARCHIVO ************************************/	
		if (NodoDefinido && NodoComoHijo){
			FileWriter escritor = new FileWriter(archivo, false);
			escritor.write(cadena);
			//System.out.println(cadena);
			escritor.close();
			System.out.println("ANALISIS CORRECTO");
			AbrirImagen();
		}
		/************************** LA ESTRUCTURA NO ES CORRECTA  ************************************/	
		else{
			System.out.println("ANALISIS INCORRECTO");
			if (NodoDefinido == false) 
			{
				System.out.println("No todos los nodos estan definidos");
				System.out.print("Nodos no definidos: ");
				System.out.println(nodos_no_definidos);
			}
			if (NodoComoHijo == false) 
			{
				System.out.println("Hay mas de un nodo NO definido como hijo (solo puede haber uno, la raiz)");
				System.out.print("Nodos no hijos: ");
				System.out.println(nodos_no_hijos);
			} 
			
		}
		
		
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefArbol",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DefArbolAux ::= DefComentarios DefAtributosNodo DefArbolAux 
            {
              Object RESULT =null;
		int comentarioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int comentarioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object comentario = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atributos_nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atributos_nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object atributos_nodo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int resto_del_arbolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resto_del_arbolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object resto_del_arbol = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = comentario.toString() + atributos_nodo.toString() + "\n"+ resto_del_arbol.toString();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefArbolAux",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DefArbolAux ::= DefComentarios DefAtributosArista DefArbolAux 
            {
              Object RESULT =null;
		int comentarioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int comentarioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object comentario = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atributos_aristaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atributos_aristaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object atributos_arista = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int resto_del_arbolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resto_del_arbolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object resto_del_arbol = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
			RESULT = comentario.toString() + atributos_arista.toString() + "\n"+resto_del_arbol.toString();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefArbolAux",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DefArbolAux ::= DefComentarios DefDefinicionNodo DefArbolAux 
            {
              Object RESULT =null;
		int comentarioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int comentarioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object comentario = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoDelArbol nodo = (NodoDelArbol)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int resto_del_arbolleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resto_del_arbolright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object resto_del_arbol = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
				String cadena = ImprimirNodo(nodo);
				RESULT = comentario.toString() +cadena + resto_del_arbol.toString();
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefArbolAux",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // DefArbolAux ::= DefComentarios LLAVE_C DefComentarios 
            {
              Object RESULT =null;
		int comentario1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int comentario1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object comentario1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int llave_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int llave_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object llave_c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int comentario2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comentario2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object comentario2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = comentario1.toString() + llave_c.toString() + comentario2.toString();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefArbolAux",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DefAtributosNodo ::= NODO CORCHETE_A DefAtributosNodoAux 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object nodo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int corchete_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int corchete_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object corchete_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object atributos = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = nodo.toString() + corchete_a.toString() + atributos.toString();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefAtributosNodo",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // DefAtributosNodoAux ::= SH IGUAL TiposSH DefAtributosNodoTerminaciones 
            {
              Object RESULT =null;
		int formaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int formaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object forma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipos_formaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipos_formaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipos_forma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int resto_atributosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resto_atributosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object resto_atributos = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = forma.toString()+ igual.toString() + tipos_forma.toString() +resto_atributos.toString()  ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefAtributosNodoAux",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DefAtributosNodoAux ::= ETIQUETA IGUAL DefEtiquetas DefAtributosNodoTerminaciones 
            {
              Object RESULT =null;
		int etiquetaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int etiquetaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object etiqueta = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int etiqueta_valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int etiqueta_valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object etiqueta_valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int resto_atributosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resto_atributosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object resto_atributos = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = etiqueta.toString() + igual.toString() + etiqueta_valor.toString() +resto_atributos.toString()  ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefAtributosNodoAux",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DefAtributosNodoAux ::= COLOR IGUAL TiposColor DefAtributosNodoTerminaciones 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipos_colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipos_colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipos_color = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int resto_atributosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resto_atributosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object resto_atributos = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = color.toString() + igual.toString() + tipos_color.toString() +resto_atributos.toString()  ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefAtributosNodoAux",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DefAtributosNodoAux ::= COLOR_FUENTE IGUAL TiposColor DefAtributosNodoTerminaciones 
            {
              Object RESULT =null;
		int color_fuenteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int color_fuenteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object color_fuente = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipos_colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipos_colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipos_color = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int resto_atributosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resto_atributosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object resto_atributos = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = color_fuente.toString() + igual.toString() + tipos_color.toString() +resto_atributos.toString()  ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefAtributosNodoAux",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DefAtributosNodoAux ::= FUENTE IGUAL TiposFuente DefAtributosNodoTerminaciones 
            {
              Object RESULT =null;
		int fuenteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fuenteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object fuente = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipos_fuenteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipos_fuenteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipos_fuente = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int resto_atributosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resto_atributosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object resto_atributos = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = fuente.toString() + igual.toString() + tipos_fuente.toString() +resto_atributos.toString()  ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefAtributosNodoAux",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DefAtributosNodoTerminaciones ::= COMA DefAtributosNodoAux 
            {
              Object RESULT =null;
		int comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object coma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int resto_atributosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resto_atributosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object resto_atributos = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = coma.toString() + resto_atributos.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefAtributosNodoTerminaciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DefAtributosNodoTerminaciones ::= CORCHETE_C 
            {
              Object RESULT =null;
		int corcheteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int corcheteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object corchete = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = corchete; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefAtributosNodoTerminaciones",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DefAtributosArista ::= ARISTA CORCHETE_A DefAtributosAristaAux 
            {
              Object RESULT =null;
		int aristaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aristaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object arista = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int corchete_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int corchete_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object corchete_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int atributosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atributosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object atributos = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = arista.toString() + corchete_a.toString() + atributos.toString();  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefAtributosArista",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DefAtributosAristaAux ::= DIRECCION IGUAL TiposDireccion DefAtributosAristaTerminaciones 
            {
              Object RESULT =null;
		int dirleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dirright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object dir = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tiposdirleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiposdirright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tiposdir = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int resto_atributosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resto_atributosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object resto_atributos = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = dir.toString() + igual.toString() + tiposdir.toString() +resto_atributos.toString()  ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefAtributosAristaAux",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DefAtributosAristaAux ::= ETIQUETA IGUAL DefEtiquetas DefAtributosAristaTerminaciones 
            {
              Object RESULT =null;
		int etiquetaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int etiquetaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object etiqueta = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int etiqueta_valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int etiqueta_valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object etiqueta_valor = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int resto_atributosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resto_atributosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object resto_atributos = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = etiqueta.toString() + igual.toString() + etiqueta_valor.toString() +resto_atributos.toString()  ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefAtributosAristaAux",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DefAtributosAristaAux ::= COLOR IGUAL TiposColor DefAtributosAristaTerminaciones 
            {
              Object RESULT =null;
		int colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object color = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipos_colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipos_colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipos_color = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int resto_atributosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resto_atributosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object resto_atributos = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = color.toString() + igual.toString() + tipos_color.toString() +resto_atributos.toString()  ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefAtributosAristaAux",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DefAtributosAristaAux ::= COLOR_FUENTE IGUAL TiposColor DefAtributosAristaTerminaciones 
            {
              Object RESULT =null;
		int color_fuenteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int color_fuenteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object color_fuente = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipos_colorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipos_colorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipos_color = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int resto_atributosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resto_atributosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object resto_atributos = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = color_fuente.toString() + igual.toString() + tipos_color.toString() +resto_atributos.toString()  ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefAtributosAristaAux",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DefAtributosAristaAux ::= FUENTE IGUAL TiposFuente DefAtributosAristaTerminaciones 
            {
              Object RESULT =null;
		int fuenteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fuenteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object fuente = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipos_fuenteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tipos_fuenteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object tipos_fuente = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int resto_atributosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resto_atributosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object resto_atributos = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = fuente.toString() + igual.toString() + tipos_fuente.toString() +resto_atributos.toString()  ;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefAtributosAristaAux",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DefAtributosAristaTerminaciones ::= COMA DefAtributosAristaAux 
            {
              Object RESULT =null;
		int comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object coma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int resto_atributosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resto_atributosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object resto_atributos = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = coma.toString() + resto_atributos.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefAtributosAristaTerminaciones",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DefAtributosAristaTerminaciones ::= CORCHETE_C 
            {
              Object RESULT =null;
		int corcheteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int corcheteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object corchete = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = corchete; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefAtributosAristaTerminaciones",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DefDefinicionNodo ::= IDENTIFICADOR DefHijosDelNodo CORCHETE_A DefAtributosNodoAux PUNTO_COMA 
            {
              NodoDelArbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int def_hijosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int def_hijosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<AristaDelArbol> def_hijos = (ArrayList<AristaDelArbol>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int corchete_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int corchete_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object corchete_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int def_atributos_particularesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int def_atributos_particularesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object def_atributos_particulares = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int punto_comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int punto_comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object punto_coma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = CreacionDelNodo(id.toString(), def_atributos_particulares.toString(), def_hijos); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefDefinicionNodo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DefDefinicionNodo ::= IDENTIFICADOR DefHijosDelNodo PUNTO_COMA 
            {
              NodoDelArbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int def_hijosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int def_hijosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<AristaDelArbol> def_hijos = (ArrayList<AristaDelArbol>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int punto_comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int punto_comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object punto_coma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			RESULT = CreacionDelNodo(id.toString(), null, def_hijos);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefDefinicionNodo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DefDefinicionNodo ::= IDENTIFICADOR CORCHETE_A DefAtributosNodoAux PUNTO_COMA 
            {
              NodoDelArbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int corchete_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int corchete_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object corchete_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int def_atributos_particularesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int def_atributos_particularesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object def_atributos_particulares = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int punto_comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int punto_comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object punto_coma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = CreacionDelNodo(id.toString(), def_atributos_particulares.toString(), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefDefinicionNodo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DefDefinicionNodo ::= IDENTIFICADOR PUNTO_COMA 
            {
              NodoDelArbol RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int punto_comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int punto_comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object punto_coma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	RESULT = CreacionDelNodo(id.toString(), null, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefDefinicionNodo",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DefHijosDelNodo ::= HIJOS IGUAL LLAVE_A DefHijosDelNodoAux 
            {
              ArrayList<AristaDelArbol> RESULT =null;
		int hijosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int hijosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object hijos = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int igualleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int igualright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object igual = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int llave_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int llave_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object llave_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int def_hijosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int def_hijosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<AristaDelArbol> def_hijos = (ArrayList<AristaDelArbol>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = def_hijos;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefHijosDelNodo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DefHijosDelNodoAux ::= IDENTIFICADOR CORCHETE_A DefAtributosAristaAux DefNodosAuxTerminaciones 
            {
              ArrayList<AristaDelArbol> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int corchete_aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int corchete_aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object corchete_a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atributo_nodoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int atributo_nodoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object atributo_nodo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int resto_nodosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resto_nodosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<AristaDelArbol> resto_nodos = (ArrayList<AristaDelArbol>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
					String cadena = atributo_nodo.toString();
					String[] arrayCadena = cadena.substring(0, cadena.length() - 1).split(",");
					ArrayList<AristaDelArbol> aristas = new ArrayList<AristaDelArbol>();
					AristaDelArbol arista = new AristaDelArbol(id.toString());
					for (int i=0; i<arrayCadena.length;i++){
					
					arista.atributos.add(arrayCadena[i]);
					}
					aristas.add(arista);
					if (resto_nodos != null){
						for(AristaDelArbol elemento : resto_nodos){
		    				aristas.add(elemento);
						}
					}			
					RESULT = aristas ; 
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefHijosDelNodoAux",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DefHijosDelNodoAux ::= IDENTIFICADOR DefNodosAuxTerminaciones 
            {
              ArrayList<AristaDelArbol> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int resto_nodosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int resto_nodosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<AristaDelArbol> resto_nodos = (ArrayList<AristaDelArbol>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
				ArrayList<AristaDelArbol> aristas = new ArrayList<AristaDelArbol>();
				AristaDelArbol arista = new AristaDelArbol(id.toString());
				if (resto_nodos != null){
						for(AristaDelArbol elemento : resto_nodos){
		    				aristas.add(elemento);
						}
				}	
				aristas.add(arista);
				RESULT = aristas;
			
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefHijosDelNodoAux",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DefNodosAuxTerminaciones ::= COMA DefHijosDelNodoAux 
            {
              ArrayList<AristaDelArbol> RESULT =null;
		int comaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object coma = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int restonodosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int restonodosright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<AristaDelArbol> restonodos = (ArrayList<AristaDelArbol>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = restonodos ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefNodosAuxTerminaciones",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DefNodosAuxTerminaciones ::= LLAVE_C 
            {
              ArrayList<AristaDelArbol> RESULT =null;
		int llave_cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llave_cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object llave_c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = null ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefNodosAuxTerminaciones",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TiposSH ::= SH_CUADRADO 
            {
              Object RESULT =null;
		int sh_cuadradoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sh_cuadradoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sh_cuadrado = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sh_cuadrado ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposSH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TiposSH ::= SH_CIRCULO 
            {
              Object RESULT =null;
		int sh_circuloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sh_circuloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sh_circulo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sh_circulo ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposSH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TiposSH ::= SH_DOBLECIRCULO 
            {
              Object RESULT =null;
		int sh_doblecirculoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sh_doblecirculoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sh_doblecirculo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sh_doblecirculo ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposSH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TiposSH ::= SH_RECTANGULO 
            {
              Object RESULT =null;
		int sh_rectanguloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sh_rectanguloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sh_rectangulo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = sh_rectangulo ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposSH",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TiposColor ::= C_AZUL 
            {
              Object RESULT =null;
		int c_azulleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c_azulright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c_azul = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c_azul ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposColor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TiposColor ::= C_VERDE 
            {
              Object RESULT =null;
		int c_verdeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c_verderight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c_verde = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c_verde ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposColor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TiposColor ::= C_ROJO 
            {
              Object RESULT =null;
		int c_rojoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c_rojoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c_rojo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c_rojo ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposColor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TiposColor ::= C_AMARILLO 
            {
              Object RESULT =null;
		int c_amarilloleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c_amarilloright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c_amarillo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c_amarillo ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposColor",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TiposFuente ::= FT_BOLD 
            {
              Object RESULT =null;
		int ft_boldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ft_boldright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ft_bold = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ft_bold ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposFuente",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TiposFuente ::= FT_DASHED 
            {
              Object RESULT =null;
		int ft_dashedleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ft_dashedright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ft_dashed = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ft_dashed ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposFuente",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TiposFuente ::= FT_SOLID 
            {
              Object RESULT =null;
		int ft_solidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ft_solidright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object ft_solid = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ft_solid; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposFuente",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TiposDireccion ::= DIR_NONE 
            {
              Object RESULT =null;
		int dir_noneleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dir_noneright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dir_none = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dir_none ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposDireccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TiposDireccion ::= DIR_FORWARD 
            {
              Object RESULT =null;
		int dir_forwardleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dir_forwardright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dir_forward = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dir_forward ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposDireccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TiposDireccion ::= DIR_BACK 
            {
              Object RESULT =null;
		int dir_backleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dir_backright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dir_back = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dir_back; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposDireccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TiposDireccion ::= DIR_BOTH 
            {
              Object RESULT =null;
		int dir_bothleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dir_bothright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object dir_both = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dir_both; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TiposDireccion",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DefComentarios ::= COMENTARIO DefComentarios 
            {
              Object RESULT =null;
		int comentarioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int comentarioright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object comentario = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int restocomentarioleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int restocomentarioright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object restocomentario = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = comentario.toString() + restocomentario.toString() ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefComentarios",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DefComentarios ::= 
            {
              Object RESULT =null;
		 RESULT = "\n" ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefComentarios",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DefEtiquetas ::= ETIQUETA_VALOR1 
            {
              Object RESULT =null;
		int etiquetaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int etiquetaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object etiqueta = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = etiqueta.toString(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefEtiquetas",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DefEtiquetas ::= ETIQUETA_VALOR2 
            {
              Object RESULT =null;
		int etiquetaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int etiquetaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object etiqueta = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = '\"' + etiqueta.toString() + '\"'; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefEtiquetas",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DefEtiquetas ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int etiquetaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int etiquetaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object etiqueta = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = '\"' + etiqueta.toString() + '\"'; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DefEtiquetas",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
